// eslint-disable
// ⚠️ DO NOT EDIT ⚠️
// This file is automatically generated, run yarn run generate to update

import { gql } from '@apollo/client';
import * as Apollo from '@apollo/client';
export type Maybe<T> = T | null;
export type InputMaybe<T> = Maybe<T>;
export type Exact<T extends { [key: string]: unknown }> = { [K in keyof T]: T[K] };
export type MakeOptional<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]?: Maybe<T[SubKey]> };
export type MakeMaybe<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]: Maybe<T[SubKey]> };
const defaultOptions = {} as const;
/** All built-in and custom scalars, mapped to their actual values */
export type Scalars = {
  ID: string;
  String: string;
  Boolean: boolean;
  Int: number;
  Float: number;
  Freeform: any;
  JSON: any;
};

export type Asset = {
  __typename?: 'Asset';
  contentType?: Maybe<Scalars['String']>;
  contentfulMetadata: ContentfulMetadata;
  description?: Maybe<Scalars['String']>;
  fileName?: Maybe<Scalars['String']>;
  height?: Maybe<Scalars['Int']>;
  size?: Maybe<Scalars['Int']>;
  sys: Sys;
  title?: Maybe<Scalars['String']>;
  url?: Maybe<Scalars['String']>;
  width?: Maybe<Scalars['Int']>;
};


export type AssetUrlArgs = {
  transform?: InputMaybe<ImageTransformOptions>;
};

export type Book = {
  __typename?: 'Book';
  author: Scalars['String'];
  coverUrl?: Maybe<Scalars['String']>;
  fallbackColors?: Maybe<Array<Maybe<Scalars['String']>>>;
  readingDate?: Maybe<Scalars['String']>;
  title: Scalars['String'];
  url: Scalars['String'];
};

export enum CollectionType {
  Reading = 'READING'
}

export type ContentfulMetadata = {
  __typename?: 'ContentfulMetadata';
  tags: Array<Maybe<ContentfulTag>>;
};

export type ContentfulTag = {
  __typename?: 'ContentfulTag';
  id?: Maybe<Scalars['String']>;
  name?: Maybe<Scalars['String']>;
};

export type Entry = {
  contentfulMetadata: ContentfulMetadata;
  sys: Sys;
};

export type Flag = {
  __typename?: 'Flag';
  key: Scalars['String'];
  value: Scalars['String'];
};

export type ImageTransformOptions = {
  backgroundColor?: InputMaybe<Scalars['String']>;
  cornerRadius?: InputMaybe<Scalars['Int']>;
  format?: InputMaybe<Scalars['String']>;
  height?: InputMaybe<Scalars['Int']>;
  quality?: InputMaybe<Scalars['Int']>;
  resizeFocus?: InputMaybe<Scalars['String']>;
  resizeStrategy?: InputMaybe<Scalars['String']>;
  width?: InputMaybe<Scalars['Int']>;
};

export type Location = {
  __typename?: 'Location';
  lat?: Maybe<Scalars['Float']>;
  lon?: Maybe<Scalars['Float']>;
};

export type Photo = {
  __typename?: 'Photo';
  description?: Maybe<Scalars['String']>;
  exif?: Maybe<Scalars['JSON']>;
  height: Scalars['Int'];
  id: Scalars['String'];
  location?: Maybe<Location>;
  tags?: Maybe<Array<Maybe<Scalars['String']>>>;
  url: Scalars['String'];
  width: Scalars['Int'];
};

export type Place = {
  __typename?: 'Place';
  location: Location;
  locationType: Scalars['String'];
  name: Scalars['String'];
};

export type Playlist = {
  __typename?: 'Playlist';
  coverUrl: Scalars['String'];
  spotifyUrl: Scalars['String'];
  title: Scalars['String'];
};

export type Post = {
  __typename?: 'Post';
  body: Scalars['Freeform'];
  coverAlt?: Maybe<Scalars['String']>;
  coverUrl?: Maybe<Scalars['String']>;
  metaDescription?: Maybe<Scalars['String']>;
  publishedDate: Scalars['String'];
  slug: Scalars['String'];
  tags?: Maybe<Array<Maybe<Scalars['String']>>>;
  title: Scalars['String'];
};

export type PostWithoutBody = {
  __typename?: 'PostWithoutBody';
  coverUrl?: Maybe<Scalars['String']>;
  metaDescription?: Maybe<Scalars['String']>;
  publishedDate: Scalars['String'];
  slug: Scalars['String'];
  title: Scalars['String'];
};

export type Query = {
  __typename?: 'Query';
  books: Array<Maybe<Book>>;
  photo?: Maybe<Photo>;
  photos: Array<Maybe<Photo>>;
  places: Array<Maybe<Place>>;
  playlists: Array<Maybe<Playlist>>;
  post?: Maybe<Post>;
  posts: Array<Maybe<PostWithoutBody>>;
  siteSettings: SiteSettings;
  spotifyPlaylist: SpotifyPlaylist;
  spotifyStatus: SpotifyStatus;
};


export type QueryBooksArgs = {
  collection?: InputMaybe<CollectionType>;
  limit?: InputMaybe<Scalars['Int']>;
};


export type QueryPhotoArgs = {
  id: Scalars['String'];
};


export type QueryPhotosArgs = {
  limit?: InputMaybe<Scalars['Int']>;
};


export type QueryPlaylistsArgs = {
  limit?: InputMaybe<Scalars['Int']>;
};


export type QueryPostArgs = {
  slug: Scalars['String'];
};


export type QueryPostsArgs = {
  limit?: InputMaybe<Scalars['Int']>;
};


export type QuerySpotifyPlaylistArgs = {
  id: Scalars['String'];
};

export type SiteSettings = {
  __typename?: 'SiteSettings';
  avatar: Asset;
  flags?: Maybe<Array<Maybe<Flag>>>;
  intro: Scalars['String'];
  metaDescription: Scalars['String'];
  siteTitle: Scalars['String'];
};

export type Song = {
  __typename?: 'Song';
  album?: Maybe<Scalars['String']>;
  albumImageUrl?: Maybe<Scalars['String']>;
  artist?: Maybe<Scalars['String']>;
  spotifyUrl?: Maybe<Scalars['String']>;
  title?: Maybe<Scalars['String']>;
};

export type SpotifyPlaylist = {
  __typename?: 'SpotifyPlaylist';
  coverUrl: Scalars['String'];
  followerCount: Scalars['Int'];
  name: Scalars['String'];
  spotifyUrl: Scalars['String'];
  trackCount: Scalars['Int'];
};

export type SpotifyStatus = {
  __typename?: 'SpotifyStatus';
  isPlaying: Scalars['Boolean'];
  song?: Maybe<Song>;
  timestamp?: Maybe<Scalars['String']>;
};

export type Sys = {
  __typename?: 'Sys';
  environmentId: Scalars['String'];
  firstPublishedAt?: Maybe<Scalars['String']>;
  id: Scalars['String'];
  publishedAt?: Maybe<Scalars['String']>;
  publishedVersion?: Maybe<Scalars['Int']>;
  spaceId: Scalars['String'];
};

export type SiteSettingsSharedFragment = { __typename?: 'SiteSettings', siteTitle: string, metaDescription: string };

export type PageHomeQueryQueryVariables = Exact<{ [key: string]: never; }>;


export type PageHomeQueryQuery = { __typename?: 'Query', siteSettings: { __typename?: 'SiteSettings', intro: string, siteTitle: string, metaDescription: string }, posts: Array<{ __typename?: 'PostWithoutBody', publishedDate: string, title: string, slug: string } | null>, books: Array<{ __typename?: 'Book', title: string, author: string, url: string, coverUrl?: string | null } | null> };

export type SpotifyStatusQueryQueryVariables = Exact<{ [key: string]: never; }>;


export type SpotifyStatusQueryQuery = { __typename?: 'Query', spotifyStatus: { __typename?: 'SpotifyStatus', timestamp?: string | null, isPlaying: boolean, song?: { __typename?: 'Song', albumImageUrl?: string | null, artist?: string | null, title?: string | null, spotifyUrl?: string | null, album?: string | null } | null } };

export type PostQueryQueryVariables = Exact<{
  slug: Scalars['String'];
}>;


export type PostQueryQuery = { __typename?: 'Query', siteSettings: { __typename?: 'SiteSettings', siteTitle: string, metaDescription: string, avatar: { __typename?: 'Asset', url?: string | null } }, post?: { __typename?: 'Post', body: any, coverUrl?: string | null, coverAlt?: string | null, metaDescription?: string | null, publishedDate: string, tags?: Array<string | null> | null, title: string } | null };

export type PostsQueryQueryVariables = Exact<{ [key: string]: never; }>;


export type PostsQueryQuery = { __typename?: 'Query', posts: Array<{ __typename?: 'PostWithoutBody', publishedDate: string, title: string, slug: string, metaDescription?: string | null } | null> };

export type PostsFeedQueryQueryVariables = Exact<{ [key: string]: never; }>;


export type PostsFeedQueryQuery = { __typename?: 'Query', siteSettings: { __typename?: 'SiteSettings', siteTitle: string, metaDescription: string }, posts: Array<{ __typename?: 'PostWithoutBody', publishedDate: string, title: string, slug: string, metaDescription?: string | null } | null> };

export type PostsSlugsQueryQueryVariables = Exact<{ [key: string]: never; }>;


export type PostsSlugsQueryQuery = { __typename?: 'Query', posts: Array<{ __typename?: 'PostWithoutBody', slug: string } | null> };

export type PlaylistQueryQueryVariables = Exact<{
  id: Scalars['String'];
}>;


export type PlaylistQueryQuery = { __typename?: 'Query', spotifyPlaylist: { __typename?: 'SpotifyPlaylist', name: string, coverUrl: string, trackCount: number, followerCount: number, spotifyUrl: string } };

export type PlacesQueryQueryVariables = Exact<{ [key: string]: never; }>;


export type PlacesQueryQuery = { __typename?: 'Query', places: Array<{ __typename?: 'Place', name: string, locationType: string, location: { __typename?: 'Location', lat?: number | null, lon?: number | null } } | null> };

export type AllPhotosQueryQueryVariables = Exact<{ [key: string]: never; }>;


export type AllPhotosQueryQuery = { __typename?: 'Query', photos: Array<{ __typename?: 'Photo', id: string, url: string, exif?: any | null, description?: string | null, width: number, height: number } | null> };

export type PhotoIdsQueryQueryVariables = Exact<{ [key: string]: never; }>;


export type PhotoIdsQueryQuery = { __typename?: 'Query', photos: Array<{ __typename?: 'Photo', id: string } | null> };

export type PhotoQueryQueryVariables = Exact<{
  id: Scalars['String'];
}>;


export type PhotoQueryQuery = { __typename?: 'Query', photo?: { __typename?: 'Photo', id: string, url: string, exif?: any | null, description?: string | null, width: number, height: number, tags?: Array<string | null> | null, location?: { __typename?: 'Location', lon?: number | null, lat?: number | null } | null } | null };

export const SiteSettingsSharedFragmentDoc = gql`
    fragment SiteSettingsShared on SiteSettings {
  siteTitle
  metaDescription
}
    `;
export const PageHomeQueryDocument = gql`
    query PageHomeQuery {
  siteSettings {
    intro
    ...SiteSettingsShared
  }
  posts(limit: 5) {
    publishedDate
    title
    slug
  }
  books: books(limit: 3, collection: READING) {
    title
    author
    url
    coverUrl
  }
}
    ${SiteSettingsSharedFragmentDoc}`;

/**
 * __usePageHomeQueryQuery__
 *
 * To run a query within a React component, call `usePageHomeQueryQuery` and pass it any options that fit your needs.
 * When your component renders, `usePageHomeQueryQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = usePageHomeQueryQuery({
 *   variables: {
 *   },
 * });
 */
export function usePageHomeQueryQuery(baseOptions?: Apollo.QueryHookOptions<PageHomeQueryQuery, PageHomeQueryQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<PageHomeQueryQuery, PageHomeQueryQueryVariables>(PageHomeQueryDocument, options);
      }
export function usePageHomeQueryLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<PageHomeQueryQuery, PageHomeQueryQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<PageHomeQueryQuery, PageHomeQueryQueryVariables>(PageHomeQueryDocument, options);
        }
export type PageHomeQueryQueryHookResult = ReturnType<typeof usePageHomeQueryQuery>;
export type PageHomeQueryLazyQueryHookResult = ReturnType<typeof usePageHomeQueryLazyQuery>;
export type PageHomeQueryQueryResult = Apollo.QueryResult<PageHomeQueryQuery, PageHomeQueryQueryVariables>;
export const SpotifyStatusQueryDocument = gql`
    query SpotifyStatusQuery {
  spotifyStatus {
    timestamp
    isPlaying
    song {
      albumImageUrl
      artist
      title
      spotifyUrl
      album
    }
  }
}
    `;

/**
 * __useSpotifyStatusQueryQuery__
 *
 * To run a query within a React component, call `useSpotifyStatusQueryQuery` and pass it any options that fit your needs.
 * When your component renders, `useSpotifyStatusQueryQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useSpotifyStatusQueryQuery({
 *   variables: {
 *   },
 * });
 */
export function useSpotifyStatusQueryQuery(baseOptions?: Apollo.QueryHookOptions<SpotifyStatusQueryQuery, SpotifyStatusQueryQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<SpotifyStatusQueryQuery, SpotifyStatusQueryQueryVariables>(SpotifyStatusQueryDocument, options);
      }
export function useSpotifyStatusQueryLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<SpotifyStatusQueryQuery, SpotifyStatusQueryQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<SpotifyStatusQueryQuery, SpotifyStatusQueryQueryVariables>(SpotifyStatusQueryDocument, options);
        }
export type SpotifyStatusQueryQueryHookResult = ReturnType<typeof useSpotifyStatusQueryQuery>;
export type SpotifyStatusQueryLazyQueryHookResult = ReturnType<typeof useSpotifyStatusQueryLazyQuery>;
export type SpotifyStatusQueryQueryResult = Apollo.QueryResult<SpotifyStatusQueryQuery, SpotifyStatusQueryQueryVariables>;
export const PostQueryDocument = gql`
    query PostQuery($slug: String!) {
  siteSettings {
    avatar {
      url
    }
    ...SiteSettingsShared
  }
  post(slug: $slug) {
    body
    coverUrl
    coverAlt
    metaDescription
    publishedDate
    tags
    title
  }
}
    ${SiteSettingsSharedFragmentDoc}`;

/**
 * __usePostQueryQuery__
 *
 * To run a query within a React component, call `usePostQueryQuery` and pass it any options that fit your needs.
 * When your component renders, `usePostQueryQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = usePostQueryQuery({
 *   variables: {
 *      slug: // value for 'slug'
 *   },
 * });
 */
export function usePostQueryQuery(baseOptions: Apollo.QueryHookOptions<PostQueryQuery, PostQueryQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<PostQueryQuery, PostQueryQueryVariables>(PostQueryDocument, options);
      }
export function usePostQueryLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<PostQueryQuery, PostQueryQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<PostQueryQuery, PostQueryQueryVariables>(PostQueryDocument, options);
        }
export type PostQueryQueryHookResult = ReturnType<typeof usePostQueryQuery>;
export type PostQueryLazyQueryHookResult = ReturnType<typeof usePostQueryLazyQuery>;
export type PostQueryQueryResult = Apollo.QueryResult<PostQueryQuery, PostQueryQueryVariables>;
export const PostsQueryDocument = gql`
    query PostsQuery {
  posts {
    publishedDate
    title
    slug
    metaDescription
  }
}
    `;

/**
 * __usePostsQueryQuery__
 *
 * To run a query within a React component, call `usePostsQueryQuery` and pass it any options that fit your needs.
 * When your component renders, `usePostsQueryQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = usePostsQueryQuery({
 *   variables: {
 *   },
 * });
 */
export function usePostsQueryQuery(baseOptions?: Apollo.QueryHookOptions<PostsQueryQuery, PostsQueryQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<PostsQueryQuery, PostsQueryQueryVariables>(PostsQueryDocument, options);
      }
export function usePostsQueryLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<PostsQueryQuery, PostsQueryQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<PostsQueryQuery, PostsQueryQueryVariables>(PostsQueryDocument, options);
        }
export type PostsQueryQueryHookResult = ReturnType<typeof usePostsQueryQuery>;
export type PostsQueryLazyQueryHookResult = ReturnType<typeof usePostsQueryLazyQuery>;
export type PostsQueryQueryResult = Apollo.QueryResult<PostsQueryQuery, PostsQueryQueryVariables>;
export const PostsFeedQueryDocument = gql`
    query PostsFeedQuery {
  siteSettings {
    ...SiteSettingsShared
  }
  posts(limit: 5) {
    publishedDate
    title
    slug
    metaDescription
  }
}
    ${SiteSettingsSharedFragmentDoc}`;

/**
 * __usePostsFeedQueryQuery__
 *
 * To run a query within a React component, call `usePostsFeedQueryQuery` and pass it any options that fit your needs.
 * When your component renders, `usePostsFeedQueryQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = usePostsFeedQueryQuery({
 *   variables: {
 *   },
 * });
 */
export function usePostsFeedQueryQuery(baseOptions?: Apollo.QueryHookOptions<PostsFeedQueryQuery, PostsFeedQueryQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<PostsFeedQueryQuery, PostsFeedQueryQueryVariables>(PostsFeedQueryDocument, options);
      }
export function usePostsFeedQueryLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<PostsFeedQueryQuery, PostsFeedQueryQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<PostsFeedQueryQuery, PostsFeedQueryQueryVariables>(PostsFeedQueryDocument, options);
        }
export type PostsFeedQueryQueryHookResult = ReturnType<typeof usePostsFeedQueryQuery>;
export type PostsFeedQueryLazyQueryHookResult = ReturnType<typeof usePostsFeedQueryLazyQuery>;
export type PostsFeedQueryQueryResult = Apollo.QueryResult<PostsFeedQueryQuery, PostsFeedQueryQueryVariables>;
export const PostsSlugsQueryDocument = gql`
    query PostsSlugsQuery {
  posts {
    slug
  }
}
    `;

/**
 * __usePostsSlugsQueryQuery__
 *
 * To run a query within a React component, call `usePostsSlugsQueryQuery` and pass it any options that fit your needs.
 * When your component renders, `usePostsSlugsQueryQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = usePostsSlugsQueryQuery({
 *   variables: {
 *   },
 * });
 */
export function usePostsSlugsQueryQuery(baseOptions?: Apollo.QueryHookOptions<PostsSlugsQueryQuery, PostsSlugsQueryQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<PostsSlugsQueryQuery, PostsSlugsQueryQueryVariables>(PostsSlugsQueryDocument, options);
      }
export function usePostsSlugsQueryLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<PostsSlugsQueryQuery, PostsSlugsQueryQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<PostsSlugsQueryQuery, PostsSlugsQueryQueryVariables>(PostsSlugsQueryDocument, options);
        }
export type PostsSlugsQueryQueryHookResult = ReturnType<typeof usePostsSlugsQueryQuery>;
export type PostsSlugsQueryLazyQueryHookResult = ReturnType<typeof usePostsSlugsQueryLazyQuery>;
export type PostsSlugsQueryQueryResult = Apollo.QueryResult<PostsSlugsQueryQuery, PostsSlugsQueryQueryVariables>;
export const PlaylistQueryDocument = gql`
    query PlaylistQuery($id: String!) {
  spotifyPlaylist(id: $id) {
    name
    coverUrl
    trackCount
    followerCount
    spotifyUrl
  }
}
    `;

/**
 * __usePlaylistQueryQuery__
 *
 * To run a query within a React component, call `usePlaylistQueryQuery` and pass it any options that fit your needs.
 * When your component renders, `usePlaylistQueryQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = usePlaylistQueryQuery({
 *   variables: {
 *      id: // value for 'id'
 *   },
 * });
 */
export function usePlaylistQueryQuery(baseOptions: Apollo.QueryHookOptions<PlaylistQueryQuery, PlaylistQueryQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<PlaylistQueryQuery, PlaylistQueryQueryVariables>(PlaylistQueryDocument, options);
      }
export function usePlaylistQueryLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<PlaylistQueryQuery, PlaylistQueryQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<PlaylistQueryQuery, PlaylistQueryQueryVariables>(PlaylistQueryDocument, options);
        }
export type PlaylistQueryQueryHookResult = ReturnType<typeof usePlaylistQueryQuery>;
export type PlaylistQueryLazyQueryHookResult = ReturnType<typeof usePlaylistQueryLazyQuery>;
export type PlaylistQueryQueryResult = Apollo.QueryResult<PlaylistQueryQuery, PlaylistQueryQueryVariables>;
export const PlacesQueryDocument = gql`
    query PlacesQuery {
  places {
    name
    locationType
    location {
      lat
      lon
    }
  }
}
    `;

/**
 * __usePlacesQueryQuery__
 *
 * To run a query within a React component, call `usePlacesQueryQuery` and pass it any options that fit your needs.
 * When your component renders, `usePlacesQueryQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = usePlacesQueryQuery({
 *   variables: {
 *   },
 * });
 */
export function usePlacesQueryQuery(baseOptions?: Apollo.QueryHookOptions<PlacesQueryQuery, PlacesQueryQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<PlacesQueryQuery, PlacesQueryQueryVariables>(PlacesQueryDocument, options);
      }
export function usePlacesQueryLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<PlacesQueryQuery, PlacesQueryQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<PlacesQueryQuery, PlacesQueryQueryVariables>(PlacesQueryDocument, options);
        }
export type PlacesQueryQueryHookResult = ReturnType<typeof usePlacesQueryQuery>;
export type PlacesQueryLazyQueryHookResult = ReturnType<typeof usePlacesQueryLazyQuery>;
export type PlacesQueryQueryResult = Apollo.QueryResult<PlacesQueryQuery, PlacesQueryQueryVariables>;
export const AllPhotosQueryDocument = gql`
    query AllPhotosQuery {
  photos {
    id
    url
    exif
    description
    width
    height
  }
}
    `;

/**
 * __useAllPhotosQueryQuery__
 *
 * To run a query within a React component, call `useAllPhotosQueryQuery` and pass it any options that fit your needs.
 * When your component renders, `useAllPhotosQueryQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useAllPhotosQueryQuery({
 *   variables: {
 *   },
 * });
 */
export function useAllPhotosQueryQuery(baseOptions?: Apollo.QueryHookOptions<AllPhotosQueryQuery, AllPhotosQueryQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<AllPhotosQueryQuery, AllPhotosQueryQueryVariables>(AllPhotosQueryDocument, options);
      }
export function useAllPhotosQueryLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<AllPhotosQueryQuery, AllPhotosQueryQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<AllPhotosQueryQuery, AllPhotosQueryQueryVariables>(AllPhotosQueryDocument, options);
        }
export type AllPhotosQueryQueryHookResult = ReturnType<typeof useAllPhotosQueryQuery>;
export type AllPhotosQueryLazyQueryHookResult = ReturnType<typeof useAllPhotosQueryLazyQuery>;
export type AllPhotosQueryQueryResult = Apollo.QueryResult<AllPhotosQueryQuery, AllPhotosQueryQueryVariables>;
export const PhotoIdsQueryDocument = gql`
    query PhotoIdsQuery {
  photos {
    id
  }
}
    `;

/**
 * __usePhotoIdsQueryQuery__
 *
 * To run a query within a React component, call `usePhotoIdsQueryQuery` and pass it any options that fit your needs.
 * When your component renders, `usePhotoIdsQueryQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = usePhotoIdsQueryQuery({
 *   variables: {
 *   },
 * });
 */
export function usePhotoIdsQueryQuery(baseOptions?: Apollo.QueryHookOptions<PhotoIdsQueryQuery, PhotoIdsQueryQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<PhotoIdsQueryQuery, PhotoIdsQueryQueryVariables>(PhotoIdsQueryDocument, options);
      }
export function usePhotoIdsQueryLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<PhotoIdsQueryQuery, PhotoIdsQueryQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<PhotoIdsQueryQuery, PhotoIdsQueryQueryVariables>(PhotoIdsQueryDocument, options);
        }
export type PhotoIdsQueryQueryHookResult = ReturnType<typeof usePhotoIdsQueryQuery>;
export type PhotoIdsQueryLazyQueryHookResult = ReturnType<typeof usePhotoIdsQueryLazyQuery>;
export type PhotoIdsQueryQueryResult = Apollo.QueryResult<PhotoIdsQueryQuery, PhotoIdsQueryQueryVariables>;
export const PhotoQueryDocument = gql`
    query PhotoQuery($id: String!) {
  photo(id: $id) {
    id
    url
    exif
    description
    width
    height
    tags
    location {
      lon
      lat
    }
  }
}
    `;

/**
 * __usePhotoQueryQuery__
 *
 * To run a query within a React component, call `usePhotoQueryQuery` and pass it any options that fit your needs.
 * When your component renders, `usePhotoQueryQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = usePhotoQueryQuery({
 *   variables: {
 *      id: // value for 'id'
 *   },
 * });
 */
export function usePhotoQueryQuery(baseOptions: Apollo.QueryHookOptions<PhotoQueryQuery, PhotoQueryQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<PhotoQueryQuery, PhotoQueryQueryVariables>(PhotoQueryDocument, options);
      }
export function usePhotoQueryLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<PhotoQueryQuery, PhotoQueryQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<PhotoQueryQuery, PhotoQueryQueryVariables>(PhotoQueryDocument, options);
        }
export type PhotoQueryQueryHookResult = ReturnType<typeof usePhotoQueryQuery>;
export type PhotoQueryLazyQueryHookResult = ReturnType<typeof usePhotoQueryLazyQuery>;
export type PhotoQueryQueryResult = Apollo.QueryResult<PhotoQueryQuery, PhotoQueryQueryVariables>;