// eslint-disable
// ⚠️ DO NOT EDIT ⚠️
// This file is automatically generated, run yarn run generate to update

import { gql } from '@apollo/client';
import * as Apollo from '@apollo/client';
export type Maybe<T> = T | null;
export type InputMaybe<T> = Maybe<T>;
export type Exact<T extends { [key: string]: unknown }> = { [K in keyof T]: T[K] };
export type MakeOptional<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]?: Maybe<T[SubKey]> };
export type MakeMaybe<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]: Maybe<T[SubKey]> };
const defaultOptions = {} as const;
/** All built-in and custom scalars, mapped to their actual values */
export type Scalars = {
  ID: string;
  String: string;
  Boolean: boolean;
  Int: number;
  Float: number;
  JSON: any;
};

export type Asset = {
  __typename?: 'Asset';
  contentType?: Maybe<Scalars['String']>;
  contentfulMetadata: ContentfulMetadata;
  description?: Maybe<Scalars['String']>;
  fileName?: Maybe<Scalars['String']>;
  height?: Maybe<Scalars['Int']>;
  size?: Maybe<Scalars['Int']>;
  sys: Sys;
  title?: Maybe<Scalars['String']>;
  url?: Maybe<Scalars['String']>;
  width?: Maybe<Scalars['Int']>;
};


export type AssetUrlArgs = {
  transform?: InputMaybe<ImageTransformOptions>;
};

export type Book = {
  __typename?: 'Book';
  author: Scalars['String'];
  coverUrl?: Maybe<Scalars['String']>;
  okuUrl: Scalars['String'];
  readingDate?: Maybe<Scalars['String']>;
  title: Scalars['String'];
};

export enum CollectionType {
  Favourites = 'FAVOURITES',
  Read = 'READ',
  Reading = 'READING'
}

export type ContentfulMetadata = {
  __typename?: 'ContentfulMetadata';
  tags: Array<Maybe<ContentfulTag>>;
};

export type ContentfulTag = {
  __typename?: 'ContentfulTag';
  id?: Maybe<Scalars['String']>;
  name?: Maybe<Scalars['String']>;
};

export type Entry = {
  contentfulMetadata: ContentfulMetadata;
  sys: Sys;
};

export type Flag = {
  __typename?: 'Flag';
  key: Scalars['String'];
  value: Scalars['String'];
};

export type ImageTransformOptions = {
  backgroundColor?: InputMaybe<Scalars['String']>;
  cornerRadius?: InputMaybe<Scalars['Int']>;
  format?: InputMaybe<Scalars['String']>;
  height?: InputMaybe<Scalars['Int']>;
  quality?: InputMaybe<Scalars['Int']>;
  resizeFocus?: InputMaybe<Scalars['String']>;
  resizeStrategy?: InputMaybe<Scalars['String']>;
  width?: InputMaybe<Scalars['Int']>;
};

export type Location = {
  __typename?: 'Location';
  lat?: Maybe<Scalars['Float']>;
  lon?: Maybe<Scalars['Float']>;
};

export type Photo = {
  __typename?: 'Photo';
  camera?: Maybe<Scalars['String']>;
  description?: Maybe<Scalars['String']>;
  height: Scalars['Int'];
  lens?: Maybe<Scalars['String']>;
  location?: Maybe<Location>;
  photoUrl: Scalars['String'];
  unsplashUrl?: Maybe<Scalars['String']>;
  width: Scalars['Int'];
};

export type Playlist = {
  __typename?: 'Playlist';
  coverUrl: Scalars['String'];
  spotifyUrl: Scalars['String'];
  title: Scalars['String'];
};

export type Post = {
  __typename?: 'Post';
  body: Scalars['String'];
  coverUrl?: Maybe<Scalars['String']>;
  metaDescription?: Maybe<Scalars['String']>;
  publishedDate: Scalars['String'];
  slug: Scalars['String'];
  tags?: Maybe<Array<Maybe<Scalars['String']>>>;
  title: Scalars['String'];
};

export type PostWithoutBody = {
  __typename?: 'PostWithoutBody';
  coverUrl?: Maybe<Scalars['String']>;
  publishedDate: Scalars['String'];
  slug: Scalars['String'];
  title: Scalars['String'];
};

export type Query = {
  __typename?: 'Query';
  books: Array<Maybe<Book>>;
  photos: Array<Maybe<Photo>>;
  playlists: Array<Maybe<Playlist>>;
  post?: Maybe<Post>;
  posts: Array<Maybe<PostWithoutBody>>;
  siteSettings: SiteSettings;
  spotifyStatus: SpotifyStatus;
};


export type QueryBooksArgs = {
  collection?: InputMaybe<CollectionType>;
  limit?: InputMaybe<Scalars['Int']>;
};


export type QueryPhotosArgs = {
  limit?: InputMaybe<Scalars['Int']>;
};


export type QueryPlaylistsArgs = {
  limit?: InputMaybe<Scalars['Int']>;
};


export type QueryPostArgs = {
  slug: Scalars['String'];
};


export type QueryPostsArgs = {
  limit?: InputMaybe<Scalars['Int']>;
};

export type SiteSettings = {
  __typename?: 'SiteSettings';
  avatar: Asset;
  flags?: Maybe<Array<Maybe<Flag>>>;
  intro: Scalars['String'];
  metaDescription: Scalars['String'];
  siteTitle: Scalars['String'];
};

export type Song = {
  __typename?: 'Song';
  album?: Maybe<Scalars['String']>;
  albumImageUrl?: Maybe<Scalars['String']>;
  artist?: Maybe<Scalars['String']>;
  spotifyUrl?: Maybe<Scalars['String']>;
  title?: Maybe<Scalars['String']>;
};

export type SpotifyStatus = {
  __typename?: 'SpotifyStatus';
  isPlaying: Scalars['Boolean'];
  song?: Maybe<Song>;
  timestamp?: Maybe<Scalars['String']>;
};

export type Sys = {
  __typename?: 'Sys';
  environmentId: Scalars['String'];
  firstPublishedAt?: Maybe<Scalars['String']>;
  id: Scalars['String'];
  publishedAt?: Maybe<Scalars['String']>;
  publishedVersion?: Maybe<Scalars['Int']>;
  spaceId: Scalars['String'];
};

export type SiteSettingsSharedFragment = { __typename?: 'SiteSettings', siteTitle: string, metaDescription: string };

export type PageHomeQueryQueryVariables = Exact<{ [key: string]: never; }>;


export type PageHomeQueryQuery = { __typename?: 'Query', siteSettings: { __typename?: 'SiteSettings', intro: string, siteTitle: string, metaDescription: string }, books: Array<{ __typename?: 'Book', title: string, author: string, okuUrl: string, coverUrl?: string | null } | null>, spotifyStatus: { __typename?: 'SpotifyStatus', timestamp?: string | null, isPlaying: boolean, song?: { __typename?: 'Song', albumImageUrl?: string | null, artist?: string | null, title?: string | null, spotifyUrl?: string | null, album?: string | null } | null } };

export type SpotifyStatusQueryQueryVariables = Exact<{ [key: string]: never; }>;


export type SpotifyStatusQueryQuery = { __typename?: 'Query', spotifyStatus: { __typename?: 'SpotifyStatus', timestamp?: string | null, isPlaying: boolean, song?: { __typename?: 'Song', albumImageUrl?: string | null, artist?: string | null, title?: string | null, spotifyUrl?: string | null, album?: string | null } | null } };

export type PostQueryQueryVariables = Exact<{
  slug: Scalars['String'];
}>;


export type PostQueryQuery = { __typename?: 'Query', siteSettings: { __typename?: 'SiteSettings', siteTitle: string, metaDescription: string, avatar: { __typename?: 'Asset', url?: string | null } }, post?: { __typename?: 'Post', body: string, coverUrl?: string | null, metaDescription?: string | null, publishedDate: string, tags?: Array<string | null> | null, title: string } | null };

export const SiteSettingsSharedFragmentDoc = gql`
    fragment SiteSettingsShared on SiteSettings {
  siteTitle
  metaDescription
}
    `;
export const PageHomeQueryDocument = gql`
    query PageHomeQuery {
  siteSettings {
    intro
    ...SiteSettingsShared
  }
  books: books(limit: 1, collection: READING) {
    title
    author
    okuUrl
    coverUrl
  }
  spotifyStatus {
    timestamp
    isPlaying
    song {
      albumImageUrl
      artist
      title
      spotifyUrl
      album
    }
  }
}
    ${SiteSettingsSharedFragmentDoc}`;

/**
 * __usePageHomeQueryQuery__
 *
 * To run a query within a React component, call `usePageHomeQueryQuery` and pass it any options that fit your needs.
 * When your component renders, `usePageHomeQueryQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = usePageHomeQueryQuery({
 *   variables: {
 *   },
 * });
 */
export function usePageHomeQueryQuery(baseOptions?: Apollo.QueryHookOptions<PageHomeQueryQuery, PageHomeQueryQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<PageHomeQueryQuery, PageHomeQueryQueryVariables>(PageHomeQueryDocument, options);
      }
export function usePageHomeQueryLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<PageHomeQueryQuery, PageHomeQueryQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<PageHomeQueryQuery, PageHomeQueryQueryVariables>(PageHomeQueryDocument, options);
        }
export type PageHomeQueryQueryHookResult = ReturnType<typeof usePageHomeQueryQuery>;
export type PageHomeQueryLazyQueryHookResult = ReturnType<typeof usePageHomeQueryLazyQuery>;
export type PageHomeQueryQueryResult = Apollo.QueryResult<PageHomeQueryQuery, PageHomeQueryQueryVariables>;
export const SpotifyStatusQueryDocument = gql`
    query SpotifyStatusQuery {
  spotifyStatus {
    timestamp
    isPlaying
    song {
      albumImageUrl
      artist
      title
      spotifyUrl
      album
    }
  }
}
    `;

/**
 * __useSpotifyStatusQueryQuery__
 *
 * To run a query within a React component, call `useSpotifyStatusQueryQuery` and pass it any options that fit your needs.
 * When your component renders, `useSpotifyStatusQueryQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useSpotifyStatusQueryQuery({
 *   variables: {
 *   },
 * });
 */
export function useSpotifyStatusQueryQuery(baseOptions?: Apollo.QueryHookOptions<SpotifyStatusQueryQuery, SpotifyStatusQueryQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<SpotifyStatusQueryQuery, SpotifyStatusQueryQueryVariables>(SpotifyStatusQueryDocument, options);
      }
export function useSpotifyStatusQueryLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<SpotifyStatusQueryQuery, SpotifyStatusQueryQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<SpotifyStatusQueryQuery, SpotifyStatusQueryQueryVariables>(SpotifyStatusQueryDocument, options);
        }
export type SpotifyStatusQueryQueryHookResult = ReturnType<typeof useSpotifyStatusQueryQuery>;
export type SpotifyStatusQueryLazyQueryHookResult = ReturnType<typeof useSpotifyStatusQueryLazyQuery>;
export type SpotifyStatusQueryQueryResult = Apollo.QueryResult<SpotifyStatusQueryQuery, SpotifyStatusQueryQueryVariables>;
export const PostQueryDocument = gql`
    query PostQuery($slug: String!) {
  siteSettings {
    avatar {
      url
    }
    ...SiteSettingsShared
  }
  post(slug: $slug) {
    body
    coverUrl
    metaDescription
    publishedDate
    tags
    title
  }
}
    ${SiteSettingsSharedFragmentDoc}`;

/**
 * __usePostQueryQuery__
 *
 * To run a query within a React component, call `usePostQueryQuery` and pass it any options that fit your needs.
 * When your component renders, `usePostQueryQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = usePostQueryQuery({
 *   variables: {
 *      slug: // value for 'slug'
 *   },
 * });
 */
export function usePostQueryQuery(baseOptions: Apollo.QueryHookOptions<PostQueryQuery, PostQueryQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<PostQueryQuery, PostQueryQueryVariables>(PostQueryDocument, options);
      }
export function usePostQueryLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<PostQueryQuery, PostQueryQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<PostQueryQuery, PostQueryQueryVariables>(PostQueryDocument, options);
        }
export type PostQueryQueryHookResult = ReturnType<typeof usePostQueryQuery>;
export type PostQueryLazyQueryHookResult = ReturnType<typeof usePostQueryLazyQuery>;
export type PostQueryQueryResult = Apollo.QueryResult<PostQueryQuery, PostQueryQueryVariables>;